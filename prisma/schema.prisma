datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

// User model representing customers
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role       @default(USER)
  accounts      Account[]
  address       Address?
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  cartItem      CartItem[]
}

// Account model for user's authentication accounts
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// VerificationToken model
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Address model for user's shipping address
model Address {
  id      String @id @default(cuid())
  street  String
  city    String
  zipCode String
  country String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
}

// Product model
model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[] // URLs of product images
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  reviews     Review[]
  orderItem   OrderItem[]
  cartItem    CartItem[]
}

model CartItem {
  userId    String
  productId String
  quantity  Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, productId])
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
}

enum OrderStatus {
  SCHEDULED
  FAILED
  PARTIALLY_FULLFILLED
  AWAITING_PAYMENT
  BACK_ORDERED
  ON_HOLD
  REFUNDED
  RETURNED
  DELIVERED
  SHIPPED
  CANCELLED
  COMPLETED
  PROCESSING
  PENDING
}

// Order model
model Order {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  status     OrderStatus @default(PENDING)
  totalPrice Float
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  items      OrderItem[]
  payment    Payment?
}

// OrderItem model representing items in an order
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

enum PaymentStatus {
  PENDING
  CHARGEBACK
  VOIDED
  CAPTURED
  AUTHORIZED
  PARTIALLY_REFUNDED
  REFUNDED
  FAILED
  COMPLETED
}

// Payment model
model Payment {
  id        String        @id @default(cuid())
  amount    Float
  currency  String        @default("ksh")
  status    PaymentStatus @default(PENDING)
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Review model
model Review {
  id        String   @id @default(cuid())
  rating    Int // Rating out of 5
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
